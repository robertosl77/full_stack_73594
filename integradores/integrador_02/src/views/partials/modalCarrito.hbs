<!-- Modal de Carrito -->
<div class="modal fade" id="modalCarrito" tabindex="-1" aria-labelledby="modalCarritoLabel" aria-hidden="true" data-user-id="{{user._id}}">
    {{!-- <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable"> --}}
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalCarritoLabel">Carrito de Compras</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
      </div>
      <div class="modal-body">
        <div class="card text-center">
          <div class="card-header">
            <ul class="nav nav-tabs card-header-tabs" id="tabs-carrito" role="tablist">
              <li class="nav-item" role="presentation">
                <button class="nav-link active" id="tab-activo" data-bs-toggle="tab" data-bs-target="#contenido-activo" type="button" role="tab">Activos</button>
              </li>
              <li class="nav-item" role="presentation">
                <button class="nav-link" id="tab-reserva" data-bs-toggle="tab" data-bs-target="#contenido-reserva" type="button" role="tab">Reservados</button>
              </li>
              <li class="nav-item" role="presentation">
                <button class="nav-link" id="tab-comprado" data-bs-toggle="tab" data-bs-target="#contenido-comprado" type="button" role="tab">Comprados</button>
              </li>
            </ul>
          </div>

          <div class="card-body tab-content" id="tabs-carrito-content">
            <div class="tab-pane fade show active" id="contenido-activo" role="tabpanel">
              <div id="lista-activos" class="list-group text-start">
                <!-- Los productos activos se cargan por JS -->
              </div>

              <div class="mt-3 d-flex justify-content-between">
                <span class="fw-bold">Total:</span>
                <span id="total-activos" class="fw-bold text-success">$0</span>
              </div>

              <div class="mt-3 d-flex justify-content-end gap-2">
                <button class="btn btn-danger" id="btn-eliminar-seleccionados">Vaciar Carrito</button>
                <button class="btn btn-success" id="btn-confirmar-compra">Comprar</button>
              </div>
            </div>

            <div class="tab-pane fade" id="contenido-reserva" role="tabpanel">
              <p class="text-muted">Productos en espera para una compra futura.</p>
              <div id="lista-reservados" class="list-group text-start"></div>
            </div>

            <div class="tab-pane fade" id="contenido-comprado" role="tabpanel">
              <p class="text-muted">Historial de productos comprados.</p>
              <div id="lista-comprados" class="list-group text-start"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const modal = document.getElementById("modalCarrito");
        const listaActivos = document.getElementById("lista-activos");
        const totalActivos = document.getElementById("total-activos");

        if (!modal) return;

        modal.addEventListener("show.bs.modal", async () => {
            const userId = modal.getAttribute("data-user-id");
            if (!userId) return;

            try {
            const res = await fetch(`/integrador2/carrito/${userId}`);
            const data = await res.json();
            const productos = data.productos || [];

            listaActivos.innerHTML = "";
            let total = 0;

            productos
                .filter(p => p.estado === 1)
                .forEach(p => {

                    console.log(p.precio_original);

                    const precioFinal = p.descuento_original > 0
                        ? p.precio_original * (1 - p.descuento_original / 100)
                        : p.precio_original;

                    const precioTotal = (precioFinal * p.cantidad_solicitada).toFixed(2);
                    total += parseFloat(precioTotal);

                    const imagen = p.imagen && p.imagen !== 'null'
                    ? `/integrador2/${p.imagen}`
                    : `/integrador2/img_productos/Imagen_no_disponible.svg.png`;

                    const item = document.createElement("div");
                    item.className = "list-group-item list-group-item-action d-flex gap-3 py-3 align-items-center position-relative";
                    item.setAttribute("data-id", p.idProducto);
                    item.innerHTML = `
                        <img src="/${p.imagen}" alt="${p.nombre}" class="rounded flex-shrink-0" style="width: 48px; height: 48px; object-fit: contain;">

                        <div class="flex-fill">
                        <div class="d-flex justify-content-between align-items-center">
                            <h6 class="mb-0">${p.nombre}</h6>
                            <span class="fw-bold text-success">$${precioFinal.toFixed(2)}</span>
                        </div>

                        <div class="d-flex align-items-center mt-2">
                            <button class="btn btn-sm btn-outline-secondary btn-restar me-2">‚àí</button>
                            <span class="cantidad fw-bold">${p.cantidad_solicitada}</span>
                            <button class="btn btn-sm btn-outline-secondary btn-sumar ms-2">+</button>

                            <span class="ms-auto fw-bold">Total: $<span class="precio-total">${precioTotal}</span></span>
                        </div>
                        </div>

                        <div class="btn-group ms-2">
                        <button class="btn btn-sm btn-outline-warning btn-reservar" title="Pasar a reservado">‚è≥</button>
                        <button class="btn btn-sm btn-outline-danger btn-eliminar" title="Eliminar">üóëÔ∏è</button>
                        </div>
                    `;
                    listaActivos.appendChild(item);

                    // Asignar funcionalidad al bot√≥n "Pasar a reservado"
                    item.querySelector(".btn-reservar").addEventListener("click", async () => {
                        try {
                            const productoId = item.getAttribute("data-id");

                            const res = await fetch("/integrador2/carrito/reservar", {
                                method: "PUT",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({ usuarioId: userId, productoId })
                            });

                            const data = await res.json();

                            if (res.ok) {
                                item.remove(); // Lo sacamos de la lista actual

                                // Recalcular total
                                const precios = listaActivos.querySelectorAll(".precio-total");
                                let nuevoTotal = 0;
                                precios.forEach(el => {
                                const valor = parseFloat(el.textContent.replace("$", "").replace(",", ".")) || 0;
                                nuevoTotal += valor;
                                });
                                totalActivos.textContent = `$${nuevoTotal.toFixed(2)}`;

                                // (Opcional) Mostrar un toast o mensaje breve si quer√©s
                            } else {
                                alert(data.error || "No se pudo reservar.");
                            }
                        } catch (err) {
                            console.error("Error al reservar:", err);
                        }
                    });            

                    // Asignar funcionalidad al bot√≥n "Borrar Producto"
                    item.querySelector(".btn-eliminar").addEventListener("click", async () => {
                        try {
                            const productoId = item.getAttribute("data-id");

                            const res = await fetch("/integrador2/carrito", {
                                method: "DELETE",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({ usuarioId: userId, productoId })
                            });

                            const data = await res.json();

                            if (res.ok) {
                                item.remove(); // Eliminar de la vista

                                // Recalcular total
                                const precios = listaActivos.querySelectorAll(".precio-total");
                                let nuevoTotal = 0;
                                precios.forEach(el => {
                                const valor = parseFloat(el.textContent.replace("$", "").replace(",", ".")) || 0;
                                nuevoTotal += valor;
                                });
                                totalActivos.textContent = `$${nuevoTotal.toFixed(2)}`;

                                // Actualizar el total
                                total -= parseFloat(precioTotal);
                                totalActivos.textContent = `$${total.toFixed(2)}`;
                            } else {
                                alert(data.error || "No se pudo eliminar.");
                            }
                        } catch (err) {
                            console.error("Error al eliminar:", err);
                        }
                    });


                    // Asignar funcionalidad al bot√≥n "Sumar"
                    item.querySelector(".btn-sumar").addEventListener("click", async () => {
                        const cantidadSpan = item.querySelector(".cantidad");
                        let cantidad = parseInt(cantidadSpan.textContent) || 1;
                        cantidad++;

                        await actualizarCantidad(cantidad);
                    });

                    // Asignar funcionalidad al bot√≥n "Restar"
                    item.querySelector(".btn-restar").addEventListener("click", async () => {
                        const cantidadSpan = item.querySelector(".cantidad");
                        let cantidad = parseInt(cantidadSpan.textContent) || 1;
                        cantidad--;

                        if (cantidad < 1) {
                            item.querySelector(".btn-eliminar").click(); // Borra si baja de 1
                            return;
                        }

                        await actualizarCantidad(cantidad);
                    });

                    // Funci√≥n para actualizar cantidad en backend y recalcular precios
                    async function actualizarCantidad(nuevaCantidad) {
                        try {
                            const productoId = item.getAttribute("data-id");
                            const res = await fetch("/integrador2/carrito/cantidad", {
                                method: "PUT",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({ usuarioId: userId, productoId, cantidad: nuevaCantidad })
                            });

                            const data = await res.json();

                            if (res.ok) {
                                item.querySelector(".cantidad").textContent = nuevaCantidad;

                                const nuevoPrecioTotal = (precioFinal * nuevaCantidad).toFixed(2);
                                item.querySelector(".precio-total").textContent = nuevoPrecioTotal;

                                // Recalcular total general
                                const precios = listaActivos.querySelectorAll(".precio-total");
                                let nuevoTotal = 0;
                                precios.forEach(el => {
                                    const valor = parseFloat(el.textContent.replace("$", "").replace(",", ".")) || 0;
                                    nuevoTotal += valor;
                                });
                                totalActivos.textContent = `$${nuevoTotal.toFixed(2)}`;
                            } else {
                                alert(data.error || "No se pudo actualizar la cantidad.");
                            }
                        } catch (err) {
                            console.error("Error al actualizar cantidad:", err);
                        }
                    }



                });

            totalActivos.textContent = `$${total.toFixed(2)}`;
            } catch (error) {
            console.error("Error al cargar el carrito:", error);
            }



            
        });

        document.getElementById("btn-eliminar-seleccionados")?.addEventListener("click", async () => {
        const userId = modal.getAttribute("data-user-id");
        if (!userId) return;

        if (!confirm("¬øEst√°s seguro de que quer√©s vaciar el carrito?")) return;

        try {
            const res = await fetch("/integrador2/carrito/vaciar", {
            method: "DELETE",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ usuarioId: userId })
            });

            const data = await res.json();

            if (res.ok) {
            listaActivos.innerHTML = "";
            totalActivos.textContent = "$0.00";
            } else {
            alert(data.error || "No se pudo vaciar el carrito.");
            }
        } catch (err) {
            console.error("Error al vaciar el carrito:", err);
        }
        });


    });
</script>

