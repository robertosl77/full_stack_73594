<!-- Modal de Carrito -->
<div class="modal fade" id="modalCarrito" tabindex="-1" aria-labelledby="modalCarritoLabel" aria-hidden="true" data-user-id="{{user._id}}">
    {{!-- <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable"> --}}
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalCarritoLabel">Carrito de Compras</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
      </div>
      <div class="modal-body">
        <div class="card text-center">
          <div class="card-header">
            <ul class="nav nav-tabs card-header-tabs" id="tabs-carrito" role="tablist">
              <li class="nav-item" role="presentation">
                <button class="nav-link active" id="tab-activo" data-bs-toggle="tab" data-bs-target="#contenido-activo" type="button" role="tab">Activos</button>
              </li>
              <li class="nav-item" role="presentation">
                <button class="nav-link" id="tab-reserva" data-bs-toggle="tab" data-bs-target="#contenido-reserva" type="button" role="tab">Reservados</button>
              </li>
              <li class="nav-item" role="presentation">
                <button class="nav-link" id="tab-comprado" data-bs-toggle="tab" data-bs-target="#contenido-comprado" type="button" role="tab">Comprados</button>
              </li>
            </ul>
          </div>

          <div class="card-body tab-content" id="tabs-carrito-content">

            {{!-- Panel de Compras --}}
            <div class="tab-pane fade show active" id="contenido-activo" role="tabpanel">
              <div id="lista-activos" class="list-group text-start">
                <!-- Los productos activos se cargan por JS -->
              </div>

              <div class="mt-3 d-flex justify-content-between">
                <span class="fw-bold">Total:</span>
                <span id="total-activos" class="fw-bold text-success">$0</span>
              </div>

              <div class="mt-3 d-flex justify-content-end gap-2">
                <button class="btn btn-danger" id="btn-eliminar-seleccionados">Vaciar Carrito</button>
                <button class="btn btn-success" id="btn-confirmar-compra">Comprar</button>
              </div>
            </div>

            {{!-- Panel de Reservados --}}
            <div class="tab-pane fade" id="contenido-reserva" role="tabpanel">
                <div id="lista-reservados" class="list-group text-start">
                    <!-- Los productos reservados se cargan por JS -->
                </div>
                <p class="text-muted mt-3">Productos en espera para una compra futura.</p>

            </div>

            {{!-- Panel de Comprados --}}
            <div class="tab-pane fade" id="contenido-comprado" role="tabpanel">
                <div id="lista-comprados" class="list-group text-start">
                    <!-- Los productos reservados se cargan por JS -->
                </div>
                <p class="text-muted mt-3">Historial de productos comprados.</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>


<script>
    document.addEventListener("DOMContentLoaded", () => {
        const modal = document.getElementById("modalCarrito");
        const listaActivos = document.getElementById("lista-activos");
        const totalActivos = document.getElementById("total-activos");
        const listaReservados = document.getElementById("lista-reservados");

        if (!modal) return;

        async function cargarActivos() {
            const userId = modal.getAttribute("data-user-id");
            if (!userId) return;

            try {
                const res = await fetch(`/integrador2/carrito/${userId}`);
                const data = await res.json();
                const productos = data.productos || [];

                listaActivos.innerHTML = "";
                let total = 0;

                productos
                    .filter(p => p.estado === 1)
                    .forEach(p => {
                        const precioFinal = p.descuento_original > 0
                            ? p.precio_original * (1 - p.descuento_original / 100)
                            : p.precio_original;

                        const precioTotal = (precioFinal * p.cantidad_solicitada).toFixed(2);
                        total += parseFloat(precioTotal);

                        const imagen = p.imagen && p.imagen !== 'null'
                            ? `/integrador2/${p.imagen}`
                            : `/integrador2/img_productos/Imagen_no_disponible.svg.png`;

                        const item = document.createElement("div");
                        item.className = "list-group-item list-group-item-action d-flex gap-3 py-3 align-items-center position-relative";
                        item.setAttribute("data-id", p.idProducto);
                        item.innerHTML = `
                            <img src="/${p.imagen}" alt="${p.nombre}" class="rounded flex-shrink-0" style="width: 48px; height: 48px; object-fit: contain;">

                            <div class="flex-fill">
                                <div class="d-flex justify-content-between align-items-center">
                                    <h6 class="mb-0">${p.nombre}</h6>
                                    <span class="fw-bold text-success">$${precioFinal.toLocaleString("es-AR", { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                                </div>

                                <div class="d-flex align-items-center mt-2">
                                    <button class="btn btn-sm btn-outline-secondary btn-restar me-2">‚àí</button>
                                    <span class="cantidad fw-bold">${p.cantidad_solicitada}</span>
                                    <button class="btn btn-sm btn-outline-secondary btn-sumar ms-2">+</button>

                                    <span class="ms-auto fw-bold">Total: $<span class="precio-total">${parseFloat(precioTotal).toLocaleString("es-AR", { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span></span>
                                </div>

                                <div style="display: none;">
                                    <small class="precio_original">Precio Original: ${p.precio_original}</small>
                                    <small class="descuento_original">Descuento Original: ${p.descuento_original}</small>
                                </div>                                
                            </div>

                            <div class="btn-group ms-2">
                            <button class="btn btn-sm btn-outline-warning btn-reservar" title="Pasar a reservado">‚è≥</button>
                            <button class="btn btn-sm btn-outline-danger btn-eliminar" title="Eliminar">üóëÔ∏è</button>
                            </div>
                        `;
                        listaActivos.appendChild(item);

                        item.querySelector(".btn-reservar").addEventListener("click", async () => {
                            try {
                                const productoId = item.getAttribute("data-id");

                                const res = await fetch("/integrador2/carrito/reservar", {
                                    method: "PUT",
                                    headers: { "Content-Type": "application/json" },
                                    body: JSON.stringify({ usuarioId: userId, productoId })
                                });

                                const data = await res.json();

                                if (res.ok) {
                                    item.remove();
                                    cargarActivos();
                                } else {
                                    alert(data.error || "No se pudo reservar.");
                                }
                            } catch (err) {
                                console.error("Error al reservar:", err);
                            }
                        });

                        item.querySelector(".btn-eliminar").addEventListener("click", async () => {
                            try {
                                const productoId = item.getAttribute("data-id");

                                const res = await fetch("/integrador2/carrito", {
                                    method: "DELETE",
                                    headers: { "Content-Type": "application/json" },
                                    body: JSON.stringify({ usuarioId: userId, productoId })
                                });

                                const data = await res.json();

                                if (res.ok) {
                                    item.remove();
                                    await cargarActivos();
                                    await cargarComprados();
                                    actualizarIconoCarrito();
                                } else {
                                    alert(data.error || "No se pudo eliminar.");
                                }
                            } catch (err) {
                                console.error("Error al eliminar:", err);
                            }
                        });

                        item.querySelector(".btn-sumar").addEventListener("click", async () => {
                            const cantidadSpan = item.querySelector(".cantidad");
                            let cantidad = parseInt(cantidadSpan.textContent) || 1;
                            cantidad++;

                            await actualizarCantidad(cantidad);
                        });

                        item.querySelector(".btn-restar").addEventListener("click", async () => {
                            const cantidadSpan = item.querySelector(".cantidad");
                            let cantidad = parseInt(cantidadSpan.textContent) || 1;
                            cantidad--;

                            if (cantidad < 1) {
                                item.querySelector(".btn-eliminar").click();
                                return;
                            }

                            await actualizarCantidad(cantidad);
                        });

                        async function actualizarCantidad(nuevaCantidad) {
                            try {
                                const productoId = item.getAttribute("data-id");
                                const res = await fetch("/integrador2/carrito/cantidad", {
                                    method: "PUT",
                                    headers: { "Content-Type": "application/json" },
                                    body: JSON.stringify({ usuarioId: userId, productoId, cantidad: nuevaCantidad })
                                });

                                const data = await res.json();

                                if (res.ok) {
                                    item.querySelector(".cantidad").textContent = nuevaCantidad;

                                    const nuevoPrecioTotal = (precioFinal * nuevaCantidad).toFixed(2);
                                    item.querySelector(".precio-total").textContent = parseFloat(nuevoPrecioTotal).toLocaleString("es-AR", { minimumFractionDigits: 2, maximumFractionDigits: 2 });

                                    const precios = listaActivos.querySelectorAll(".precio-total");
                                    let nuevoTotal = 0;
                                    precios.forEach(el => {
                                        const valor = parseFloat(el.textContent.replace(/\./g, '').replace(',', '.'));
                                        nuevoTotal += valor;
                                    });

                                    totalActivos.textContent = `$${nuevoTotal.toLocaleString("es-AR", { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
                                } else {
                                    alert(data.error || "No se pudo actualizar la cantidad.");
                                }
                            } catch (err) {
                                console.error("Error al actualizar cantidad:", err);
                            }
                        }
                    });

                totalActivos.textContent = `$${total.toLocaleString("es-AR", { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
            } catch (error) {
                console.error("Error al cargar el carrito:", error);
            }
        }

        // Cargar productos reservados
        async function cargarReservados() {
            const userId = modal.getAttribute("data-user-id");
            if (!userId) return;

            try {
            const res = await fetch(`/integrador2/carrito/${userId}`);
            const data = await res.json();
            const productos = data.productos || [];

            listaReservados.innerHTML = "";

            productos
                .filter(p => p.estado === 2)
                .forEach(p => {
                const precioFinal = p.descuento_original > 0
                    ? p.precio_original * (1 - p.descuento_original / 100)
                    : p.precio_original;

                const imagen = p.imagen && p.imagen !== 'null'
                    ? `/integrador2/${p.imagen}`
                    : `/integrador2/img_productos/Imagen_no_disponible.svg.png`;

                const item = document.createElement("div");
                item.className = "list-group-item d-flex gap-3 py-3 align-items-center";
                item.setAttribute("data-id", p.idProducto);
                item.innerHTML = `
                    <img src="/${p.imagen}" alt="${p.nombre}" class="rounded flex-shrink-0" style="width: 48px; height: 48px; object-fit: contain;">
                    <div class="flex-fill">
                    <div class="d-flex justify-content-between align-items-center">
                        <h6 class="mb-0">${p.nombre}</h6>
                        <span class="fw-bold text-success">$${precioFinal.toLocaleString("es-AR", { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                    </div>
                    </div>
                    <div class="btn-group ms-2">
                    <button class="btn btn-sm btn-outline-primary btn-reactivar" title="Volver a activos">üõí</button>
                    <button class="btn btn-sm btn-outline-danger btn-eliminar" title="Eliminar">üóëÔ∏è</button>
                    </div>
                `;

                listaReservados.appendChild(item);

                item.querySelector(".btn-reactivar").addEventListener("click", async () => {
                    const productoId = item.getAttribute("data-id");
                    try {
                    const res = await fetch("/integrador2/carrito", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ productoId, cantidad: 1 })
                    });

                    if (res.ok) {
                        item.remove();
                    } else {
                        alert("No se pudo reactivar el producto.");
                    }
                    } catch (err) {
                    console.error("Error al reactivar:", err);
                    }
                });

                item.querySelector(".btn-eliminar").addEventListener("click", async () => {
                    const productoId = item.getAttribute("data-id");
                    try {
                    const res = await fetch("/integrador2/carrito", {
                        method: "DELETE",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ usuarioId: modal.getAttribute("data-user-id"), productoId })
                    });

                    if (res.ok) {
                        item.remove();
                    } else {
                        alert("No se pudo eliminar el producto.");
                    }
                    } catch (err) {
                    console.error("Error al eliminar:", err);
                    }
                });
                });

            } catch (error) {
            console.error("Error al cargar productos reservados:", error);
            }
        }

        // Cargar comprados
        async function cargarComprados() {
            const userId = modal.getAttribute("data-user-id");
            if (!userId) return;

            const listaComprados = document.getElementById("lista-comprados");
            listaComprados.innerHTML = "";

            try {
                const res = await fetch(`/integrador2/carrito/${userId}`);
                const data = await res.json();
                const productos = data.productos || [];

                productos
                    .filter(p => p.estado === 3)
                    .forEach(p => {
                        const precioFinal = p.descuento_original > 0
                            ? p.precio_original * (1 - p.descuento_original / 100)
                            : p.precio_original;

                        const totalPagado = precioFinal * p.cantidad_solicitada;

                        const imagen = p.imagen && p.imagen !== 'null'
                            ? `/integrador2/${p.imagen}`
                            : `/integrador2/img_productos/Imagen_no_disponible.svg.png`;

                        const item = document.createElement("div");
                        item.className = "list-group-item d-flex gap-3 py-3 align-items-center";
                        item.innerHTML = `
                            <img src="/${p.imagen}" alt="${p.nombre}" class="rounded flex-shrink-0" style="width: 48px; height: 48px; object-fit: contain;">
                            <div class="flex-fill">
                                <div class="d-flex justify-content-between">
                                    <h6 class="mb-0">${p.nombre}</h6>
                                    <span class="fw-bold text-success">$${precioFinal.toLocaleString("es-AR", { minimumFractionDigits: 2 })}</span>
                                </div>
                                <div class="d-flex justify-content-between mt-1">
                                    <small>Cantidad: ${p.cantidad_solicitada}</small>
                                    <small>Total pagado: <strong>$${totalPagado.toLocaleString("es-AR", { minimumFractionDigits: 2 })}</strong> (hace ${p.fecha_compra})</small>
                                </div>
                            </div>
                        `;

                        listaComprados.appendChild(item);
                    });
            } catch (err) {
                console.error("Error al cargar productos comprados:", err);
            }
        }


        modal.addEventListener("show.bs.modal", () => {
            cargarActivos();
            cargarReservados();
            cargarComprados();
        });

        modal.addEventListener("hide.bs.modal", () => {
            actualizarIconoCarrito();
        });

        document.getElementById("btn-eliminar-seleccionados")?.addEventListener("click", async () => {
            const userId = modal.getAttribute("data-user-id");
            if (!userId) return;

            if (!confirm("¬øEst√°s seguro de que quer√©s vaciar el carrito?")) return;

            try {
                const res = await fetch("/integrador2/carrito/vaciar", {
                    method: "DELETE",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ usuarioId: userId })
                });

                const data = await res.json();

                if (res.ok) {
                    listaActivos.innerHTML = "";
                    totalActivos.textContent = "$0.00";
                    actualizarIconoCarrito();
                } else {
                    alert(data.error || "No se pudo vaciar el carrito.");
                }
            } catch (err) {
                console.error("Error al vaciar el carrito:", err);
            }
        });

        document.getElementById("btn-confirmar-compra")?.addEventListener("click", async () => {
            const userId = modal.getAttribute("data-user-id");
            if (!userId) return;

            if (!confirm("¬øDese√°s confirmar la compra de los productos en el carrito?")) return;

            try {
                const productosActivos = [...listaActivos.querySelectorAll(".list-group-item")].map(item => {
                const productoId = item.getAttribute("data-id");
                const cantidad = parseInt(item.querySelector(".cantidad")?.textContent || "1");
                const precio_original = parseInt(
                    item.querySelector(".precio_original")?.textContent.replace(/[^\d]/g, "") || "0"
                );
                const precio = parseFloat(
                    item.querySelector(".text-success")?.textContent?.replace(/\$/g, '').replace(/\./g, '').replace(',', '.')
                );
                const descuento = parseInt(item.querySelector(".text-success")?.getAttribute("data-descuento")) || 0;
                const descuento_original = parseInt(
                    item.querySelector(".descuento_original")?.textContent.replace(/[^\d]/g, "") || "0"
                );

                return {
                    productoId,
                    cantidad,
                    precio: precio_original,
                    descuento: descuento_original
                };
                });

                const res = await fetch("/integrador2/carrito/comprar", {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ usuarioId: userId, productos: productosActivos })
                });

                const data = await res.json();

                if (res.ok) {
                    await cargarActivos();
                    await cargarComprados();
                    actualizarIconoCarrito();
                } else {
                if (data.accion_sugerida === "refresh") {
                    alert(data.mensaje || "Hubo una inconsistencia, actualiz√° la p√°gina.");
                    location.reload();
                } else {
                    alert(data.error || "No se pudo completar la compra.");
                    console.warn(data);
                }
                }
            } catch (err) {
                console.error("Error al confirmar compra:", err);
            }
        });

        document.querySelector('#tab-activo')?.addEventListener("shown.bs.tab", () => {
            cargarActivos();
        });

        document.querySelector('#tab-compra')?.addEventListener("shown.bs.tab", () => {
            cargarComprados();
        });

        document.querySelector('#tab-reserva')?.addEventListener("shown.bs.tab", () => {
            cargarReservados();
        });

        async function actualizarIconoCarrito() {
            try {
                const res = await fetch("/integrador2/carrito/cantidad");
                const data = await res.json();
                const cantidad = data.cantidad || 0;
                const cartWrapper = document.querySelector("#cart-wrapper");
                const cartCount = document.querySelector("#cart-count");

                if (cartWrapper) cartWrapper.style.display = cantidad > 0 ? "inline-block" : "none";
                if (cartCount) cartCount.textContent = cantidad;
            } catch (err) {
                console.error("Error al actualizar √≠cono del carrito:", err);
            }
        }


    });


</script>





{{!-- Controla el cierre del Modal --}}
<script>
    document.addEventListener("DOMContentLoaded", () => {
        const modal = document.getElementById("modalCarrito");
        modal?.addEventListener("hide.bs.modal", () => {
            if (document.activeElement) {
            document.activeElement.blur();
            }
        });
    });
</script>